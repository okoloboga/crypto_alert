from aiogram.types import (InlineKeyboardButton, InlineKeyboardMarkup)
from aiogram.utils.keyboard import InlineKeyboardBuilder
from lexicon.lexicon import LEXICON

"""–°–æ–∑–¥–∞–Ω–∏–µ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π"""
# –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
new_task_button = InlineKeyboardButton(text=LEXICON['new_task'],
                                       callback_data='new_task')
view_task_button = InlineKeyboardButton(text=LEXICON['view_tasks'],
                                        callback_data='view_tasks')
# –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏—Ö –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
main_keyboard = [[new_task_button], [view_task_button]]
# –û–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
main_inline = InlineKeyboardMarkup(inline_keyboard=main_keyboard)

"""–í—ã–±–æ—Ä –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã"""
# –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
eth_usd_button = InlineKeyboardButton(text=LEXICON['eth'],
                                      callback_data='eth')
btc_usd_button = InlineKeyboardButton(text=LEXICON['btc'],
                                      callback_data='btc')
cancel_button = InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å",
                                     callback_data='cancel')
# –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏—Ö –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
pair_keyboard = [[eth_usd_button], [btc_usd_button], [cancel_button]]
# –û–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
pair_inline = InlineKeyboardMarkup(inline_keyboard=pair_keyboard)

"""–í—ã–±–æ—Ä —Ç–∏–ø–∞ —Å–∏–≥–Ω–∞–ª–∞ - –Ω–∏–∂–µ/–≤—ã—à–µ —á–µ–º"""
# –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
up_button = InlineKeyboardButton(text=str('üëÜ' + LEXICON['up'].capitalize() + 'üëÜ'),
                                 callback_data='up')
down_button = InlineKeyboardButton(text=('üëá' + LEXICON['down'].capitalize() + 'üëá'),
                                   callback_data='down')
# –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏—Ö –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
up_down_keyboard = [[up_button], [down_button], [cancel_button]]
# –û–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
up_down_inline = InlineKeyboardMarkup(inline_keyboard=up_down_keyboard)

"""–í–≤–æ–¥ —Å—É–º–º—ã"""

digit_keyboard = []

for j in range(3):
    digit_keyboard.append(
        [InlineKeyboardButton(text=str(i + j * 3 + 1), callback_data=str(i + j * 3 + 1)) for i in range(3)])

digit_keyboard.append([InlineKeyboardButton(text='<', callback_data='<'),
                       InlineKeyboardButton(text='0', callback_data='0'),
                       InlineKeyboardButton(text='ok', callback_data='ok')])
digit_keyboard.append([cancel_button])

digit_inline = InlineKeyboardMarkup(inline_keyboard=digit_keyboard)

"""–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á"""


# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def create_tasks_keyboard(*args: list) -> InlineKeyboardMarkup:
    kb_builder = InlineKeyboardBuilder()

    # –ö–Ω–æ–ø–∫–∏ —Å –∑–∞–¥–∞—á–∞–º–∏
    for button in args:
        kb_builder.row(InlineKeyboardButton(
            text=f"{button[0].upper()} {LEXICON[button[1]]} {button[2]}",
            callback_data=str(button)
        ))
    # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
    kb_builder.row(
        InlineKeyboardButton(
            text='–û—Ç–º–µ–Ω–∏—Ç—å',
            callback_data='cancel'
        )
    )

    return kb_builder.as_markup()
